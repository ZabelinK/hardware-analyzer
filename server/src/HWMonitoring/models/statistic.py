# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from HWMonitoring import db

from typing import List, Dict  # noqa: F401

from HWMonitoring.models.base_model_ import Model
from HWMonitoring import util

unique_id = 0

class Statistic(Model, db.Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    __tablename__ = "statistic"

    id_ = db.Column(db.Integer, primary_key=True)
    machine_id_ = db.Column(db.Integer, db.ForeignKey("machines.id_"))
    #machine_id_r = db.relationship("machine_id_", secondary="machines", backref="id")
    process_ = db.Column(db.Integer)
    cpu_load_ = db.Column(db.Integer)
    memory_load_ = db.Column(db.Integer)
    timestamp_ = db.Column(db.Integer)

    def __init__(self, **kwargs):
        global unique_id
        unique_id += 1
        kwargs['id_'] = unique_id
        super(Statistic, self).__init__(**kwargs)

    def __repr__(self):
        return '<id %r, machine_id %r, process %r, cpu_load %r, memory_load %r, timestamp %r>' \
            % (self.id_, self.machine_id_, self.process_, self.cpu_load_, self.memory_load_, self.timestamp_)
    
    def to_dict(self):
        return {
            'id' : self.id_,
            'machine_id' : self.machine_id_,
            'process' : self.process_,
            'cpu_load' : self.cpu_load_,
            'memory_load' : self.memory_load_,
            'timestamp' : self.timestamp_
        }
    
    @classmethod
    def from_dict(cls, dikt) -> 'Statistic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Statistic of this Statistic.  # noqa: E501
        :rtype: Statistic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Statistic.


        :return: The id of this Statistic.
        :rtype: int
        """
        return self.id_

    @id.setter
    def id(self, id: int):
        """Sets the id of this Statistic.


        :param id: The id of this Statistic.
        :type id: int
        """

        self.id_ = id

    @property
    def machine_id(self) -> int:
        """Gets the machine_id of this Statistic.


        :return: The machine_id of this Statistic.
        :rtype: int
        """
        return self.machine_id_

    @machine_id.setter
    def machine_id(self, machine_id: int):
        """Sets the machine_id of this Statistic.


        :param machine_id: The machine_id of this Statistic.
        :type machine_id: int
        """

        self.machine_id_ = machine_id

    @property
    def process(self) -> int:
        """Gets the process of this Statistic.


        :return: The process of this Statistic.
        :rtype: int
        """
        return self.process_

    @process.setter
    def process(self, process: int):
        """Sets the process of this Statistic.


        :param process: The process of this Statistic.
        :type process: int
        """

        self.process_ = process

    @property
    def cpu_load(self) -> int:
        """Gets the cpu_load of this Statistic.


        :return: The cpu_load of this Statistic.
        :rtype: int
        """
        return self.cpu_load_

    @cpu_load.setter
    def cpu_load(self, cpu_load: int):
        """Sets the cpu_load of this Statistic.


        :param cpu_load: The cpu_load of this Statistic.
        :type cpu_load: int
        """

        self.cpu_load_ = cpu_load

    @property
    def memory_load(self) -> int:
        """Gets the memory_load of this Statistic.


        :return: The memory_load of this Statistic.
        :rtype: int
        """
        return self.memory_load_

    @memory_load.setter
    def memory_load(self, memory_load: int):
        """Sets the memory_load of this Statistic.


        :param memory_load: The memory_load of this Statistic.
        :type memory_load: int
        """

        self.memory_load_ = memory_load

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this Statistic.


        :return: The timestamp of this Statistic.
        :rtype: datetime
        """
        return self.timestamp_

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this Statistic.


        :param timestamp: The timestamp of this Statistic.
        :type timestamp: datetime
        """

        self.timestamp_ = timestamp
